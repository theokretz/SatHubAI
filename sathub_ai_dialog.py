# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SatHubAIDialog
                                 A QGIS plugin
 This plugin automates the download of satellite data from multiple providers and detects specific features in the data with AI.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-10-16
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Theo Kretz
        email                : theokretz2001@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from .src.invekos.invekos_manager import InvekosManager
from .src.logger_setup import setup_logging
from .src.utils import display_error_message
from .src.invekos.load_invekos_data import LoadInvekosData
from .src.requester.stac_requester import StacRequester
from .src.options_dialog.options_dialog import OptionsDialog
from .src.requester.request_config import RequestConfig
from .src.requester.provider import Provider
from .src.select_area import SelectArea
from .src.requester.sentinel_hub_requester import SentinelHubRequester
from .src.utils import display_warning_message

# to load icons
from . import resources_rc

from PyQt5.QtWidgets import QDockWidget, QWidget
from qgis.PyQt import uic
from qgis.core import (
    QgsProject, QgsVectorLayer
)


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'sathub_ai_dialog_base.ui'))

# QDockWidget needed for plugin to be docked
class SatHubAIDialog(QDockWidget, FORM_CLASS):
    def __init__(self, canvas, parent=None):
        """Constructor."""
        super(SatHubAIDialog, self).__init__(parent)

        self.logger = setup_logging()

        self.options_dialog = None

        # additional options
        self.additional_options_sentinel_hub = None
        self.additional_options_planetary_computer = None
        self.additional_options_earth_search = None

        # to select area on the map
        self.select_area_tool = None

        # to store coordinates
        self.coords_wgs84 = (None, None)

        # to store download directory
        self.download_directory = None

        # get canvas from parent - needed to interact with the map
        self.canvas = canvas

        # Add InvekosManager
        self.invekos_manager = InvekosManager()

        # set up a widget to contain the UI elements
        self.main_widget = QWidget(self)
        self.setupUi(self.main_widget)

        # buttons/widgets
        self.pbSubmit.clicked.connect(self.on_pb_submit_clicked)
        self.tbSelectArea.clicked.connect(self.on_tb_select_area_clicked)
        self.fwGetDirectory.fileChanged.connect(self.on_fw_get_directory_clicked)
        self.pb_options_sh.clicked.connect(lambda: self.open_options_dialog("SENTINEL_HUB"))
        self.pb_options_pc.clicked.connect(lambda: self.open_options_dialog("PLANETARY_COMPUTER"))
        self.pb_options_es.clicked.connect(lambda: self.open_options_dialog("EARTH_SEARCH"))

        self.setWindowTitle("SatHubAI")
        # ensure window is docked and not floating
        self.setFloating(False)

        # dock widget
        self.setWidget(self.main_widget)

    def open_options_dialog(self, provider):
        """opens the options dialog for satellite providers"""
        self.options_dialog = OptionsDialog(parent=self, provider=provider)

        # connect options emit signal to function
        self.options_dialog.options.connect(self.handle_additional_options)

        self.options_dialog.exec_()

    def handle_additional_options(self, options_config):
        """handles the additional options set in the options dialog"""
        if options_config.provider == "PLANETARY_COMPUTER":
            self.additional_options_planetary_computer = options_config
        elif options_config.provider == "EARTH_SEARCH":
            self.additional_options_earth_search = options_config
        elif options_config.provider ==  "SENTINEL_HUB":
            self.additional_options_sentinel_hub = options_config
        else:
            raise ValueError(f"Unsupported provider: {options_config.provider}")

    def on_fw_get_directory_clicked(self):
        self.download_directory = self.fwGetDirectory.filePath()

    def on_pb_submit_clicked(self):
        """requests true color image"""
        start_date = self.calendarStart.selectedDate().toString("yyyy-MM-dd")
        end_date = self.calendarEnd.selectedDate().toString("yyyy-MM-dd")
        download_checked = self.cbDownload.isChecked()
        selected_file_type = self.comboboxFileType.currentText()
        import_checked = self.cb_import.isChecked()
        plot_checked = self.cb_plot_image.isChecked()
        change_detection = self.cb_change_detection.isChecked()
        invekos_data = self.cb_invekos.isChecked()
        crop_classification = self.cb_crop_classification.isChecked()

        # checkboxes provider
        sentinel_checked = self.cbSentinelHub.isChecked()
        planetary_checked = self.cbPlanetaryComputer.isChecked()
        earth_search_checked = self.cbEarthSearch.isChecked()

        if self.coords_wgs84 == (None, None):
            display_warning_message('Please select an area.', 'No area selected!')
            return

        if start_date > end_date:
            display_warning_message('End date should be after start date.')
            return

        if download_checked and self.download_directory is None:
            display_warning_message('Please select download directory.', 'No Directory selected!')
            return

        # First load INVEKOS data if change detection is enabled
        if change_detection or invekos_data or crop_classification:
            invekos_layer = self.invekos_manager.load_invekos_data(
                self.coords_wgs84,
                self.calendarStart.selectedDate(),
                self.calendarEnd.selectedDate()
            )

            if not invekos_layer:
                display_warning_message(
                    "Failed to load INVEKOS data. Please check your selection.",
                    "INVEKOS Data Error"
                )
                return

            # if only invekos checked - operation successful and return
            if invekos_data and not sentinel_checked and not planetary_checked and not earth_search_checked and not change_detection and not crop_classification:
                return

        if not sentinel_checked and not planetary_checked and not earth_search_checked:
            display_warning_message("Please select a satellite provider.","No Satellite Provider selected!")
            return

        config = RequestConfig(
            self.coords_wgs84,
            start_date,
            end_date,
            download_checked,
            selected_file_type,
            self.download_directory,
            import_checked,
            plot_checked,
            change_detection,
            crop_classification,
            None
        )

        # sentinel hub
        if sentinel_checked:
            config.additional_options = self.additional_options_sentinel_hub
            requester = SentinelHubRequester(config)
            requester.execute_request()

        # planetary computer
        if planetary_checked:
            config.additional_options = self.additional_options_planetary_computer
            requester = StacRequester(config, Provider.PLANETARY_COMPUTER, self.invekos_manager)
            requester.execute_request()

        # earth search
        if earth_search_checked:
            config.additional_options = self.additional_options_earth_search
            requester = StacRequester(config, Provider.EARTH_SEARCH, self.invekos_manager)
            requester.execute_request()


    def on_tb_select_area_clicked(self):
        """adds map layers and activates area drawing tool"""
        SatHubAIDialog.add_map_layer()

        # activate area drawing tool
        self.select_area_tool = SelectArea(self.canvas)
        self.canvas.setMapTool(self.select_area_tool)

        # connect the area_selected signal to the function that handles the coordinates
        self.select_area_tool.area_selected.connect(self.handle_coordinates)


    @staticmethod
    def add_map_layer():
        """adds map layers"""
        project = QgsProject.instance()

        # TODO: maybe remove this, useful for development tho
        # remove existing layers
        if project.mapLayers() is not None:
            for layer in project.mapLayers():
                project.removeMapLayer(layer)

        # get current directory
        current_directory = os.path.dirname(__file__)

        # vector layer
        vector_layer_path = os.path.join(current_directory, 'mapLayers', 'world-administrative-boundaries', 'world-administrative-boundaries.shp')
        vector_layer = QgsVectorLayer(vector_layer_path, "World Map Layer", "ogr")

        if not vector_layer.isValid():
            raise FileNotFoundError(f"Could not load vector layer: {vector_layer_path}")
        else:
            print("Layer loaded successfully!")
            print(f"Layer World CRS: {vector_layer.crs().authid()}")
        project.addMapLayer(vector_layer)


    # TODO: maybe just send top left and bottom right coordinates
    def handle_coordinates(self, top_left, top_right, bottom_right, bottom_left):
        """saves coordinates and updates UI"""
        # save bounding box
        self.coords_wgs84 = (top_left, bottom_right)

        # updates UI with coordinates
        self.label_coordinates.setText(f"{top_left.x()}, {top_left.y()} \n{bottom_right.x()}, {bottom_right.y()}")