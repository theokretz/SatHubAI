# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SatHubAIDialog
                                 A QGIS plugin
 This plugin automates the download of satellite data from multiple providers and detects specific features in the data with AI.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-10-16
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Theo Kretz
        email                : theokretz2001@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5.QtWidgets import QMessageBox

from .sentinel_hub_request import true_color_without_clouds

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'sathub_ai_dialog_base.ui'))


class SatHubAIDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(SatHubAIDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pbSubmit.clicked.connect(self.on_pb_submit_clicked)

    def on_pb_submit_clicked(self):
        start_date = self.calendarStart.selectedDate().toString("yyyy-MM-dd")
        end_date = self.calendarEnd.selectedDate().toString("yyyy-MM-dd")
        download_checked = self.cbDownload.isChecked()
        selected_file_type = self.comboboxFileType.currentText()

        if start_date > end_date:
            QMessageBox.critical(self, 'Error', 'End date should be after start date.')

        true_color_without_clouds(start_date, end_date, download_checked, selected_file_type)
